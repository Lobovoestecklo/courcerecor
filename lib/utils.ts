import type {
  CoreAssistantMessage,
  CoreToolMessage,
  Message,
  TextStreamPart,
  ToolInvocation,
  ToolSet,
  UIMessage,
} from 'ai';
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

import type { Document } from '@/lib/db/schema';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

interface ApplicationError extends Error {
  info: string;
  status: number;
}

export const fetcher = async (url: string) => {
  const res = await fetch(url);

  if (!res.ok) {
    const error = new Error(
      'An error occurred while fetching the data.',
    ) as ApplicationError;

    error.info = await res.json();
    error.status = res.status;

    throw error;
  }

  return res.json();
};

export function getLocalStorage(key: string) {
  if (typeof window !== 'undefined') {
    return JSON.parse(localStorage.getItem(key) || '[]');
  }
  return [];
}

export function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

function addToolMessageToChat({
  toolMessage,
  messages,
}: {
  toolMessage: CoreToolMessage;
  messages: Array<Message>;
}): Array<Message> {
  return messages.map((message) => {
    if (message.toolInvocations) {
      return {
        ...message,
        toolInvocations: message.toolInvocations.map((toolInvocation) => {
          const toolResult = toolMessage.content.find(
            (tool) => tool.toolCallId === toolInvocation.toolCallId,
          );

          if (toolResult) {
            return {
              ...toolInvocation,
              state: 'result',
              result: toolResult.result,
            };
          }

          return toolInvocation;
        }),
      };
    }

    return message;
  });
}

type ResponseMessageWithoutId = CoreToolMessage | CoreAssistantMessage;
type ResponseMessage = ResponseMessageWithoutId & { id: string };

export function sanitizeResponseMessages({
  messages,
  reasoning,
}: {
  messages: Array<ResponseMessage>;
  reasoning: string | undefined;
}) {
  const toolResultIds: Array<string> = [];

  for (const message of messages) {
    if (message.role === 'tool') {
      for (const content of message.content) {
        if (content.type === 'tool-result') {
          toolResultIds.push(content.toolCallId);
        }
      }
    }
  }

  const messagesBySanitizedContent = messages.map((message) => {
    if (message.role !== 'assistant') return message;

    if (typeof message.content === 'string') return message;

    const sanitizedContent = message.content.filter((content) =>
      content.type === 'tool-call'
        ? toolResultIds.includes(content.toolCallId)
        : content.type === 'text'
          ? content.text.length > 0
          : true,
    );

    if (reasoning) {
      // @ts-expect-error: reasoning message parts in sdk is wip
      sanitizedContent.push({ type: 'reasoning', reasoning });
    }

    return {
      ...message,
      content: sanitizedContent,
    };
  });

  return messagesBySanitizedContent.filter(
    (message) => message.content.length > 0,
  );
}

export function getMostRecentUserMessage(messages: Array<UIMessage>) {
  const userMessages = messages.filter((message) => message.role === 'user');
  return userMessages.at(-1);
}

export function getBestUserMessageForTitle(messages: Array<UIMessage>) {
  const userMessages = messages.filter((message) => message.role === 'user');
  console.log('üîç [TITLE LOGIC] Total user messages:', userMessages.length);

  // –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
  const greetings = [
    '–ø—Ä–∏–≤–µ—Ç',
    '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
    '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å',
    '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
    '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
    'hi',
    'hello',
    'hey',
    'good morning',
    'good afternoon',
    'good evening',
    '–ø—Ä–∏–≤–µ—Ç!',
    '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!',
    '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å!',
    '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!',
    '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
    'hi!',
    'hello!',
    'hey!',
    'good morning!',
    'good afternoon!',
    'good evening!',
  ];

  // –ò—â–µ–º —Å–∞–º–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let bestMessage = null;
  let bestScore = 0;

  for (const message of userMessages) {
    const messageText = message.parts
      .filter((part) => part.type === 'text')
      .map((part) => (part as any).text)
      .join(' ')
      .toLowerCase()
      .trim();

    console.log('üîç [TITLE LOGIC] Analyzing message:', messageText);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    const isOnlyGreeting = greetings.some(
      (greeting) => messageText === greeting || messageText === greeting.trim(),
    );

    if (isOnlyGreeting) {
      console.log('‚è≠Ô∏è [TITLE LOGIC] Skipping greeting message');
      continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    }

    // –í—ã—á–∏—Å–ª—è–µ–º "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å" —Å–æ–æ–±—â–µ–Ω–∏—è
    let score = 0;

    // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ –¥–ª–∏–Ω—É (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ)
    score += Math.min(messageText.length, 100);

    // –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º
    const educationalKeywords = [
      '–∫—É—Ä—Å',
      '–æ–±—É—á–µ–Ω–∏–µ',
      '—Ä–∞–∑–≤–∏—Ç–∏–µ',
      '–Ω–∞–≤—ã–∫',
      '—É–º–µ–Ω–∏–µ',
      '–∏–∑—É—á–∏—Ç—å',
      '–Ω–∞—É—á–∏—Ç—å—Å—è',
      '–ø—Ä–æ–≥—Ä–∞–º–º–∞',
      '—Ç—Ä–µ–Ω–∏–Ω–≥',
      '—Å–µ–º–∏–Ω–∞—Ä',
      '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
      '–ø—Ä–∞–∫—Ç–∏–∫–∞',
      '—Ç–µ–æ—Ä–∏—è',
      '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
      '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ',
      '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
      '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
      '–ø—Ä–æ–¥–∞–∂–∏',
      '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
      '—Ñ–∏–Ω–∞–Ω—Å—ã',
      '–∞–Ω–∞–ª–∏–∑',
      '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–ø—Ä–æ–µ–∫—Ç',
      '–∫–æ–º–∞–Ω–¥–∞',
      '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
      '–∫–ª–∏–µ–Ω—Ç—ã',
      '–ø–∞—Ä—Ç–Ω–µ—Ä—ã',
      '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
      '–∫–æ–Ω—Ñ–ª–∏–∫—Ç',
      '–º–æ—Ç–∏–≤–∞—Ü–∏—è',
      '–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–∫–æ–Ω—Ç—Ä–æ–ª—å',
      '–æ—Ü–µ–Ω–∫–∞',
      '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
      'excel',
      'word',
      'powerpoint',
      'access',
      'outlook',
      'teams',
      'sharepoint',
      'python',
      'javascript',
      'html',
      'css',
      'sql',
      '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
      '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
      '–≥—Ä–∞—Ñ–∏–∫–∏',
      '–æ—Ç—á–µ—Ç—ã',
      '–¥–æ–∫—É–º–µ–Ω—Ç—ã',
      '–ø—Ä–æ—Ü–µ—Å—Å—ã',
      '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    ];

    educationalKeywords.forEach((keyword) => {
      if (messageText.includes(keyword)) {
        score += 50; // –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        console.log(
          'üéØ [TITLE LOGIC] Found educational keyword:',
          keyword,
          'score +50',
        );
      }
    });

    // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (
      messageText.includes('—Ö–æ—á—É') ||
      messageText.includes('–Ω—É–∂–Ω–æ') ||
      messageText.includes('—Ç—Ä–µ–±—É–µ—Ç—Å—è')
    ) {
      score += 30;
      console.log('üéØ [TITLE LOGIC] Found request word, score +30');
    }

    if (
      messageText.includes('—Å—Ç–∞—Ç—å') ||
      messageText.includes('—Ä–∞–∑–≤–∏—Ç—å—Å—è') ||
      messageText.includes('–ø–æ–ª—É—á–∏—Ç—å')
    ) {
      score += 25;
      console.log('üéØ [TITLE LOGIC] Found goal word, score +25');
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageText.length < 10) {
      score -= 20;
      console.log('‚ö†Ô∏è [TITLE LOGIC] Short message penalty, score -20');
    }

    console.log('üìä [TITLE LOGIC] Message score:', score);

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª—É—á—à–µ–≥–æ
    if (score > bestScore) {
      bestScore = score;
      bestMessage = message;
      console.log('üèÜ [TITLE LOGIC] New best message found with score:', score);
    }
  }

  console.log('üèÜ [TITLE LOGIC] Final best message score:', bestScore);

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
  return bestMessage || userMessages.at(-1);
}

export function getDocumentTimestampByIndex(
  documents: Array<Document>,
  index: number,
) {
  if (!documents) return new Date();
  if (index > documents.length) return new Date();

  return documents[index].createdAt;
}

export function getTrailingMessageId({
  messages,
}: {
  messages: Array<ResponseMessage>;
}): string | null {
  const trailingMessage = messages.at(-1);

  if (!trailingMessage) return null;

  return trailingMessage.id;
}

export const createDocumentUpdateMessage = (
  documentId: string,
  title: string,
  description: string,
  content: string,
) => {
  return [
    {
      type: 'text',
      text: `–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.`,
    },
    {
      type: 'tool-invocation',
      toolInvocation: {
        state: 'result',
        step: 0,
        args: {
          id: documentId,
          description: description,
        },
        toolCallId: `toolu_${generateUUID()}`,
        toolName: 'updateDocument',
        result: {
          id: documentId,
          title: title,
          kind: 'text',
          content,
          justUpdated: true,
        },
      },
    },
    {
      type: 'text',
      text: `–£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω.`,
    },
  ];
};

export function getCustomScriptantinoFormat(text: any) {
  if (!text || typeof text !== 'string') return text;

  return (
    text
      // Opening tags
      .replace(/<—Ä–∞–∑–±–æ—Ä_—Å—Ü–µ–Ω–∞—Ä–∏—è>/g, '**–†–∞–∑–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è:**\n')
      .replace(/<–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>/g, '**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n')
      .replace(/<–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ>/g, '**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**\n')
      .replace(/<–ø–æ–¥–¥–µ—Ä–∂–∫–∞>/g, '**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n')
      // Closing tags
      .replace(/<\/—Ä–∞–∑–±–æ—Ä_—Å—Ü–µ–Ω–∞—Ä–∏—è>/g, '\n')
      .replace(/<\/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è>/g, '\n')
      .replace(/<\/–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ>/g, '\n')
      .replace(/<\/–ø–æ–¥–¥–µ—Ä–∂–∫–∞>/g, '\n')
  );
}
